AWSTemplateFormatVersion: '2010-09-09'
Description: Main stack for EC2, Lambda, Roles

Parameters:
  AMIId:
    Type: String
    Default: ami-00ca32bbc84273381
    Description: The AMI ID to use for the EC2 instance
  KeyPairName:
    Type: String
    Default: my-key
    Description: The name of the EC2 Key Pair
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type

Resources:
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - codebuild:*
                  - cloudformation:*
                  - iam:PassRole
                  - lambda:*
                  - ec2:*
                  - logs:CreateLogGroup # For Logging cloudformation.
                  - logs:CreateLogStream # For Logging cloudformation.
                  - logs:PutLogEvents # For Logging cloudformation.
                  - codestar-connections:UseConnection # Since we are using codeStarConnection.
                Resource: "*"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - cloudformation:*
                  - lambda:*
                  - ec2:*
                  - logs:*
                Resource: "*"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

# https://docs.aws.amazon.com/AWSCloudFormation/latest/TemplateReference/aws-resource-lambda-function.html
# code from lambda/app.py
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: # For Small Project it's okay to use inline code, for larger projects use S3 Bucket
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Hello from Lambda!'
              }
      Runtime: python3.9
      Timeout: 10

  DeploymentBucket:
    Type: AWS::S3::Bucket

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd
          echo "<html><h1>Hello from EC2!</h1></html>" > /var/www/html/index.html

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

# Output s3 bucket name and lambda function name and ec2 public ip
Outputs:
  DeploymentBucketName: # We will use when pipeline created.
    Description: "S3 Bucket for deployment artifacts"
    Value: !Ref DeploymentBucket
  LambdaFunctionName: # We will use to test trigger
    Description: "Lambda Function Name"
    Value: !Ref LambdaFunction
  EC2InstancePublicIP: # We will use to application domain
    Description: "EC2 Instance Public IP"
    Value: !GetAtt EC2Instance.PublicIp
